c
Request.all.map(&:state)
Request.where(state: :closed).count
Request.count
c
comment_params
coment_params
c
req_ids
n
c
CGI.unescapeHTML(react_props[0][0])
c
CGI.unescapeHTML(react_props[0][0])
CGI.unescapeHTML(react_props[0][0]
react_props[0][0]
response.status
c
props_hash['requests']
c
comment.errors
comment.valid?
comment
n
request
n
c
params
c
params
c
params.permit(:request_id, comment: [:body])
params.permit(:request_id, comment: {:body})
params.permit(:request_id, comment: {})
params.permit(:request_id).permit(comment: {})
params.permit(:request_id).require(comment: {})
params
params.permit(:request_id).require(:comment)
params.permit(:request_id).request(:comment)
params.permit(:request_id)
params.permit(:id)
params
request_params.keys
request_params
c
props_hash
n
c
exit
JSON.parse(CGI.unescapeHTML(react_props[0][0]))exit!
JSON.parse(CGI.unescapeHTML(react_props[0][0]))
CGI.unescapeHTML(react_props[0][0])
URI.decode(react_props[0][0])
URI.encode(react_props[0][0])
URI.decode(react_props[0][0])
JSON(react_props[0][0])
JSON.parse(react_props[0][0])
react_props[0][0]
react_props[0]
react_props
n
c
request.as_json(only: [:id])
request.as_json(only: :id)
request.as_json
request.to_json
request
c
aa.merge({'updated_at' => 'aa'})
aa['updated_at']
aa
git aa
c
current_user.requests
c
Request.last
